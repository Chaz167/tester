/******************************* RELATIONSHIPS ********************************/
/* Context-to-Context relationships.                                          */
/******************************************************************************/
addOnEvent("Context",      "show", "onDisplayContext()");
addOnEvent("Relationship", "show", "onDisplayRelationship()");

String WEB_REL_DESC_FMT      = "%s <u>&nbsp;%s&nbsp;</u> <u>&nbsp;%s&nbsp;</u>";
String WEB_REL_DESC_FILL     = "?";
String WEB_REL_BLANK         = "&nbsp;";

String selectedRelId         = null;
String selectedRelIdentifier = null;

String displayedTabGroup     = null;

onDisplayContext()        {displayedTabGroup = "Context";}
onDisplayRelationship()   {displayedTabGroup = "Relationship";}
isDisplayedContext()      {return displayedTabGroup.equals("Context");}
isDisplayedRelationship() {return displayedTabGroup.equals("Relationship");}

// Depends on the following globals:
//   - selectedRelId
//   - userid        (Defined by autogen)
deleteRelationship() {
  if (isNull(selectedRelId)) {
    showToast("No relationship selected");
    return;
  }

  String q = "";
  q += " INSERT INTO aentreln (uuid, relationshipid, deleted, participatesverb, userid)";
  q += " SELECT uuid, relationshipid, 'true', participatesverb, '"+userid+"'";
  q += " FROM latestnondeletedaentreln";
  q += " WHERE relationshipid = '"+selectedRelId+"'";

  DeleteCallback cb = new DeleteCallback() {
    onDelete(uuid) {
      deleteRelationshipSuceeded();
    }
  };

  fetchOne(q);
  deleteRel(selectedRelId, cb);
}

deleteRelationshipSuceeded() {
  selectedRelId         = null;
  selectedRelIdentifier = null;

  if (isDisplayedContext()) {
      populateWebViewHtml(REF_SELECTED_REL_CONTEXT,      WEB_REL_NONE);
      populateExistingRelationships();
  }
  if (isDisplayedRelationship()) {
      populateWebViewHtml(REF_SELECTED_REL_RELATIONSHIP, WEB_REL_NONE);
      searchRelationship();
  }
}

getSelectedRelationshipComponent(String arg) {
  String REF_REL_TYPE = "Relationship/Relationships/Relationship_Type";

  String   val       = getFieldValue(REF_REL_TYPE);
  String[] arguments = null;
  if (val == null)
      return null;
  else
      arguments = val.split("~!~");

  String   relationshipName = arguments[0];
  String   parentRole       = arguments[1];
  String   childRole        = arguments[2];

  arg = arg.toLowerCase();
  if      (arg.equals("name"))   return relationshipName;
  else if (arg.equals("parent")) return parentRole;
  else if (arg.equals("child"))  return childRole;
  else                           return null;
}

getRelatedContextQuery(String parentUuid) {
  // `contextIdentifer` is defined in logic/shared.bsh
  String relatedQ = "";
  relatedQ += "SELECT 'related' || char(0) || relationshipid || char(0) || '"+contextIdentifer+" ' || parentparticipatesverb ||' '|| response || char(0) || childuuid, parentparticipatesverb||' '||response";
  relatedQ += "  FROM parentchild JOIN latestNonDeletedArchEntFormattedIdentifiers on (childuuid = uuid) ";
  relatedQ += "  JOIN createdmodifiedatby USING (uuid) ";
  relatedQ += " WHERE relationshipid in (SELECT relationshipid  ";
  relatedQ += "                            FROM latestnondeletedrelationship JOIN relntype USING (relntypeid)  ";
  relatedQ += "                           WHERE relntypename not like 'Context%') ";
  relatedQ += "   and parentuuid = '"+parentUuid+"' ";
  relatedQ += "   and parentaenttypename = 'Context' ";
  relatedQ += " ORDER BY createdat desc ";
  relatedQ += " LIMIT ? OFFSET ? ";
  return relatedQ;
}

//////////////////// FUNCTIONS AFFECTING CONTEXT TAB GROUP /////////////////////
addOnEvent("Context",                                    "show",  "initContextRelationshipGlobals()");
addOnEvent("Context",                                    "show",  "populateExistingRelationships()");
addOnEvent("Context/Relationships/Load_Related_Context", "click", "loadRelatedContext()");

addOnEvent("Context/Relationships/Existing_Relationships_to_This_Context", "click", "selectRelationship()");
addOnEvent("Context/Relationships/Delete_Relationship",                    "click", "deleteRelationship()");

String REF_SELECTED_REL_CONTEXT = "Context/Relationships/Selected_Relationship";
String selectedChildUuid        = null;

initContextRelationshipGlobals() {
  selectedChildUuid     = null;
  selectedRelId         = null;
  selectedRelIdentifier = null;

  populateWebViewHtml(REF_SELECTED_REL_CONTEXT, WEB_REL_NONE);
}

populateExistingRelationships(){
  String tabGroup    = "Context";
  String currentUuid = getUuid(tabGroup);
  String refExistingRelationships = "Context/Relationships/Existing_Relationships_to_This_Context";

  String q = getRelatedContextQuery(currentUuid);

  populateCursorList(refExistingRelationships, q, 25);
  refreshTabgroupCSS(tabGroup);
}

selectRelationship() {
  String val = getListItemValue();
  if (isNull(val)) return;

  String[] arguments = val.split(SEP); // `SEP` defined by autogen as \0
  String   listName  = arguments[0];
  if (!listName.equals("related")) return;

  selectedRelId         = arguments[1];
  selectedRelIdentifier = arguments[2];
  selectedChildUuid     = arguments[3];

  populateWebViewHtml(REF_SELECTED_REL_CONTEXT, selectedRelIdentifier);
}

loadRelatedContext() {
  if (isNull(selectedChildUuid)) {
    showToast("No relationship selected");
    return;
  }
  loadEntityFrom(selectedChildUuid);
}

////////////////// FUNCTIONS AFFECTING RELATIONSHIP TAB GROUP //////////////////
addOnEvent("Relationship",                                      "show",  "initRelationshipRelationshipGlobals()");
addOnEvent("Relationship/Relationships/Add_Relationship",       "click", "addRelationship()");
addOnEvent("Relationship/Relationships/Delete_Relationship",    "click", "deleteRelationship()");
addOnEvent("Relationship/Relationships/Existing_Relationships", "click", "selectExistingRelationship()");
addOnEvent("Relationship/Relationships/Relationship_Type",      "click", "populateProposedRelationship()");
addOnEvent("Relationship/Relationships/Search",                 "click", "populateProposedRelationship()");
addOnEvent("Relationship/Relationships/Search",                 "click", "searchRelationship()");
addOnEvent("Relationship/Relationships/Unrelated_Contexts",     "click", "selectUnrelatedContext()");

String proposedChildUuid       = null;
String proposedChildIdentifier = null;

String REF_PROPOSED_REL              = "Relationship/Relationships/Proposed_Relationship";
String REF_SELECTED_REL_RELATIONSHIP = "Relationship/Relationships/Selected_Relationship";

initRelationshipRelationshipGlobals() {
  proposedChildUuid       = null;
  proposedChildIdentifier = null;
  selectedRelId           = null;
  selectedRelIdentifier   = null;

  populateLotLabelRelationships();
  populateRelationshipSquare();
  populateRelationshipType();
  populateProposedRelationship();
  clearSearch();
}


populateRelationshipSquare() {
  String ref = "Relationship/Relationships/Square";
  populateSquare(ref);
}

populateRelationshipType() {
  refRelationshipType = "Relationship/Relationships/Relationship_Type";

  String q = "";
  q += "SELECT relntypename||'~!~'||coalesce(nullif(parent||'~!~'||child,'~!~'),relntypename||'~!~'||relntypename) as relntypeid, coalesce(nullif(parent,''), relntypename) as name, relntypeid ";
  q += "  FROM relntype ";
  q += " WHERE relntypename not like '%Context%' ";
  q += "   AND relntypename not like '%Special Find%' ";
  q += " UNION ";
  q += " SELECT relntypename||'~!~'||coalesce(nullif(child||'~!~'||parent,'~!~'),relntypename||'~!~'||relntypename), coalesce(nullif(child,''), relntypename) as name, relntypeid ";
  q += "  FROM relntype ";
  q += " WHERE relntypename not like '%Context%' ";
  q += "   AND relntypename not like '%Special Find%' ";
  q += " ORDER BY relntypeid, name";

  FetchCallback populate = new FetchCallback() {
    onFetch(result) {
      populateDropDown(refRelationshipType, result);
    }
  };

  fetchAll(q, populate);
}

populateProposedRelationship() {
  String identifierFrom;
  String relationship;
  String identifierTo;

  identifierFrom = contextIdentifer; // Defined in logic/shared.bsh
  relationship   = getSelectedRelationshipComponent("parent");
  identifierTo   = proposedChildIdentifier;

  if (isNull(identifierFrom)) identifierFrom = WEB_REL_DESC_FILL;
  if (isNull(relationship  )) relationship   = WEB_REL_DESC_FILL;
  if (isNull(identifierTo  )) identifierTo   = WEB_REL_DESC_FILL;

  String webviewHtml = WEB_REL_DESC_FMT;
  webviewHtml = replaceFirst(webviewHtml, "%s", identifierFrom);
  webviewHtml = replaceFirst(webviewHtml, "%s", relationship  );
  webviewHtml = replaceFirst(webviewHtml, "%s", identifierTo  );

  populateWebViewHtml(REF_PROPOSED_REL, webviewHtml);
}

searchRelationship() {
  String parentTabGroup = "Context";
  String parentUuid     = getUuid(parentTabGroup);

  String tabGroup     = "Relationship";
  String refUnrelated = tabGroup + "/Relationships/Unrelated_Contexts";
  String refRelated   = tabGroup + "/Relationships/Existing_Relationships";
  String refSquare    = tabGroup + "/Relationships/Square";

  String square     = getFieldValue(refSquare);
  String parentRole = getSelectedRelationshipComponent("parent");
  String unrelatedQ = "";
  String relatedQ   = "";

  unrelatedQ += " SELECT 'unrelated' || char(0) || uuid || char(0) || response, response  ";
  unrelatedQ += "   FROM latestNonDeletedArchEntFormattedIdentifiers   ";
  unrelatedQ += "  WHERE uuid IN (SELECT uuid ";
  unrelatedQ += "         FROM latestnondeletedaentvalue  ";
  unrelatedQ += "         JOIN attributekey USING (attributeid) ";
  unrelatedQ += "         WHERE uuid IN (   SELECT uuid  ";
  unrelatedQ += "                             FROM latestnondeletedaentvalue JOIN attributekey USING (attributeid) ";
  unrelatedQ += "                            WHERE attributename = 'Square' ";
  unrelatedQ += "                              AND measure = '"+square+"' ";
  unrelatedQ += "                              and uuid not in (select childuuid ";
  unrelatedQ += "                                                 from parentchild ";
  unrelatedQ += "                                                where parentuuid = '"+parentUuid+"' ";
  unrelatedQ += "                                                  and parentparticipatesverb = '"+parentRole+"')";
  unrelatedQ += "                              AND uuid != '"+parentUuid+"'";
  unrelatedQ += "                       )   ";
  unrelatedQ += "                ) ";
  unrelatedQ += "  ORDER BY response ";
  unrelatedQ += "  LIMIT ? OFFSET ?";

  relatedQ += getRelatedContextQuery(parentUuid);

  populateCursorList(refUnrelated, unrelatedQ, 25);
  populateCursorList(refRelated,   relatedQ,   25);

  proposedChildUuid = null; proposedChildIdentifier = null;
  populateProposedRelationship();
}

clearSearch() {
  String q = "SELECT '' WHERE 0 LIMIT ? OFFSET ?";
  populateCursorList("Relationship/Relationships/Unrelated_Contexts",     q, 25);
  populateCursorList("Relationship/Relationships/Existing_Relationships", q, 25);
}

selectUnrelatedContext() {
  String val = getListItemValue();
  if (isNull(val)) return;
  String[] arguments = val.split(SEP); // `SEP` defined by autogen as \0
  String   listName  = arguments[0];
  if (!listName.equals("unrelated")) return;

  proposedChildUuid       = arguments[1];
  proposedChildIdentifier = arguments[2];

  populateProposedRelationship();
}

addRelationship() {
  String parentTabGroup = "Context";

  String relName    = getSelectedRelationshipComponent("name");
  String parentUuid = getUuid(parentTabGroup);
  String childUuid  = proposedChildUuid;
  String parentRole = getSelectedRelationshipComponent("parent");
  String childRole  = getSelectedRelationshipComponent("child");
  String callback   = "addRelationshipSucceeded()";

  if (isNull(parentUuid)) {
    String msgHead = "Logic Error";
    String msgBody = "Something happened which never should.";
    showWarning(msgHead, msgBody);
    return;
  }
  if (isNull(childUuid)) {
    showToast("No Context selected");
    return;
  }

  saveEntitiesToHierRel(
      relName,
      parentUuid, childUuid,
      parentRole, childRole,
      callback
  );
}

addRelationshipSucceeded() {
  proposedChildUuid       = null;
  proposedChildIdentifier = null;

  populateWebViewHtml(REF_PROPOSED_REL, WEB_REL_BLANK);

  searchRelationship();
}

selectExistingRelationship() {
  String val = getListItemValue();
  if (isNull(val)) return;

  String[] arguments = val.split(SEP); // `SEP` defined by autogen as \0
  String   listName  = arguments[0];
  if (!listName.equals("related")) return;

  selectedRelId         = arguments[1];
  selectedRelIdentifier = arguments[2];

  populateWebViewHtml(REF_SELECTED_REL_RELATIONSHIP, selectedRelIdentifier);
}

populateLotLabelRelationships() {
  String lotRef = "Relationship/Relationships/LOT_Label";
  populateLotLabel(lotRef); // Defined in logic/shared.bsh
}
